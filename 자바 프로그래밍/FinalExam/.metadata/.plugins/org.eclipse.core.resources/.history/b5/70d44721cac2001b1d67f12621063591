// JPanel that creates a ball when the mouse is pressed.  Ball bounces
// around the JPanel.
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.util.Random;

public class BallPanel extends JPanel
{
	private ArrayList<Ball> balls = new ArrayList<Ball>(20);
   private ExecutorService threadExecutor; // for running Ball runnable
   private JFrame parentWindow; // parent window of JPanel
   private final int MAX_X = 200; // horizontal edge of JPanel
   private final int MAX_Y = 200; // vertical edge of JPanel
   private Color color;
   private static final Random generator = new Random();
   
   
   public BallPanel( JFrame window )
   {
      parentWindow = window; // set parent window of JPanel

      // create ExecutorService for running ball runnable
      threadExecutor = Executors.newCachedThreadPool();

      // anonymous inner class handles mouse events
      this.addMouseListener( 
         new MouseAdapter() 
         {
            public void mousePressed( MouseEvent event ) 
            {
               if (event.getButton() == MouseEvent.BUTTON1) {
            	   clearBall();
               }
               
               if (event.getButton() == MouseEvent.BUTTON3) {
            	   changedBackgroundColor();
               }
               
               if (event.getButton() == MouseEvent.BUTTON2) {
            	   createBall( event ); // delegate call to ball starter
                   RepaintTimer timer = new RepaintTimer( parentWindow );
                   threadExecutor.execute( timer );
               }
            } // end method mousePressed
         } // end anonymous inner class
      ); // end call to addMouseListener
   } // end BallPanel constructor

   // create a ball if no ball exists and set it in motion
   private void createBall( MouseEvent event )
   {
         int x = event.getX(); // get x position of mouse press
         int y = event.getY(); // get y position of mouse press
         Ball newball = new Ball( x, y ); // create new ball
         this.threadExecutor.execute( newball ); // set ball in motion
         balls.add(newball);

   } // end method createBall

   private void changedBackgroundColor() {
	   int red = generator.nextInt(256);
	   int green = generator.nextInt(256);
	   int blue = generator.nextInt(256);
	   this.setBackground(new Color(red,green,blue));
   }
   
   private void clearBall() {
	   balls.clear();
   }
   // return minimum size of animation
   public Dimension getMinimumSize()
   { 
      return getPreferredSize(); 
   } // end method getMinimumSize

   // return preferred size of animation
   public Dimension getPreferredSize()
   {
      return new Dimension( MAX_X, MAX_Y );
   } // end method getPreferredSize

   // draw ball at current position
   public void paintComponent( Graphics g )
   {
	   super.paintComponent( g );
	   for (Ball ball : balls) {
		   if ( ball != null) {
			   g.setColor(new Color(ball.r, ball.g, ball.b)); // set color to blue
			   g.fillOval( ball.getX(), ball.getY(), 10, 10 ); // draws
		   }
	   }
      
      
       // end if
   } // end method paintComponent
} // end class BallPanel